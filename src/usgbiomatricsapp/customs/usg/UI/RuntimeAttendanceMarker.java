/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package usgbiomatricsapp.customs.usg.UI;

import java.awt.Color;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.border.LineBorder;
import javax.swing.plaf.basic.BasicArrowButton;
import usgbiomatricsapp.customs.AttendanceMarkerListener;
import usgbiomatricsapp.customs.usg.helper.DBHandler;
import usgbiomatricsapp.customs.usg.pojo.Employee;

/**
 *
 * @author usmanriaz
 */
public class RuntimeAttendanceMarker extends javax.swing.JDialog {

    /**
     * Creates new form RuntimeAttendanceMarker
     */
    private Employee emp;
    private AttendanceMarkerListener l;
    private String mode;

    public RuntimeAttendanceMarker(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
//        jrSick.setVisible(false);
//        rbCasual.setVisible(false);
//        rbPriv.setVisible(false);
        //jLabel3.setVisible(false);

    }

    public void addAttendanceMarkerListener(AttendanceMarkerListener l) {
        this.l = l;
    }

//    public void setMode(String mode) {
//        this.mode = mode;
//        if (mode.equals("LEAVING")) {
//            rbout.setText("Out");
//            jLabel2.setVisible(true);
//            jLabel1.setVisible(true);
//            jPanel1.setBorder(new LineBorder(Color.BLACK));
//            jPanel3.setBorder(new LineBorder(Color.BLACK));
//            jPanel2.setBorder(new LineBorder(Color.BLACK));
//            jsAMPM.setVisible(true);
//            jTextField1.setVisible(true);
//            jTextField2.setVisible(true);
//            jButton1.setVisible(true);
//            jButton2.setVisible(true);
//            jButton3.setVisible(true);
//            jButton4.setVisible(true);
//        } else {
//            rbout.setText("In");
//            jLabel2.setVisible(false);
//            jPanel1.setBorder(null);
//            jPanel3.setBorder(null);
//            jPanel2.setBorder(null);
//            jsAMPM.setVisible(false);
//            jLabel1.setVisible(false);
//            jTextField1.setVisible(false);
//            jTextField2.setVisible(false);
//            jButton1.setVisible(false);
//            jButton2.setVisible(false);
//            jButton3.setVisible(false);
//            jButton4.setVisible(false);
//        }
//    }

    public void setEmp(Employee emp) {
        this.emp = emp;

        //after setting the employee enable/disable short leave control depending on if he
        //already availed short leave in that day or not
        DBHandler db = new DBHandler();
        int limitReached = db.slDailyLimitReachedQuestionMark(this.emp.getEmpCode());
        if (limitReached == 1) {
            //rbShortLeave.setEnabled(false);
            //rbhalf.setEnabled(false);
            rbOd.setEnabled(false);
            //rbout.setVisible(true);
        } else {
            //rbout.setVisible(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel5 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jButton5 = new javax.swing.JButton();
        jbMarkOk = new javax.swing.JButton();
        rbOd = new javax.swing.JRadioButton();
        rbPersonalReasons = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(678, 495));
        setSize(new java.awt.Dimension(678, 495));

        jPanel5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jPanel7.setLayout(new java.awt.GridLayout(2, 1));

        jButton5.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jButton5.setForeground(new java.awt.Color(255, 0, 0));
        jButton5.setText("Cancel");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel7.add(jButton5);

        jbMarkOk.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jbMarkOk.setForeground(new java.awt.Color(0, 204, 0));
        jbMarkOk.setText("OK");
        jbMarkOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbMarkOkActionPerformed(evt);
            }
        });
        jPanel7.add(jbMarkOk);

        buttonGroup2.add(rbOd);
        rbOd.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        rbOd.setSelected(true);
        rbOd.setText("Official Work");
        rbOd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbOdActionPerformed(evt);
            }
        });

        buttonGroup2.add(rbPersonalReasons);
        rbPersonalReasons.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        rbPersonalReasons.setText("Personal Reasons");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rbOd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbPersonalReasons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbOd)
                            .addComponent(rbPersonalReasons, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(48, Short.MAX_VALUE))
        );

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("To proceed , click 'OK' or 'Cancel' to exit.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 678, Short.MAX_VALUE)
            .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(265, 265, 265))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbMarkOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbMarkOkActionPerformed
        if (rbOd.isSelected()){
            l.ok("messge od");
            this.dispose();
        }else if (rbPersonalReasons.isSelected()){
            l.ok("message personal reason");
            this.dispose();
        }

    }//GEN-LAST:event_jbMarkOkActionPerformed
    
    /*private void okActionPerformed() {
        //if user has no option but to go out without anything
        if (rbout.isSelected()) {
            l.ok("no leave for today, marking attendance");
            this.dispose();
            return;
        }
        int hours = Integer.parseInt(jTextField1.getText());
        int min = Integer.parseInt(jTextField2.getText());
        String ampm = jsAMPM.getSelectedItem().toString();

        String type = "";
        if (rbOd.isSelected()) {
            type = "Official Duty";
        } else if (rbShortLeave.isSelected()) {
            type = "Short Leave";
        } else {
            type = "Half Leave";
        }

        Calendar odc = new GregorianCalendar();
        odc.setTimeInMillis(System.currentTimeMillis());
        odc.set(Calendar.HOUR, hours);
        odc.set(Calendar.MINUTE, min);
        odc.set(Calendar.AM_PM, ampm.equals("PM") ? Calendar.PM : Calendar.AM);
        java.util.Date odDate = odc.getTime();

        Calendar shc = new GregorianCalendar();
        shc.setTimeInMillis(System.currentTimeMillis());
        shc.add(Calendar.HOUR, 2);
        java.util.Date shortDate = shc.getTime();

        Calendar hc = new GregorianCalendar();
        hc.setTimeInMillis(System.currentTimeMillis());
        hc.add(Calendar.HOUR, 4);
        java.util.Date halfLeaveDate = hc.getTime();

        DBHandler d = new DBHandler();
        String result = "";
        if (type.equals("Official Duty")) {
            String message = null;
            if (mode.equals("LEAVING")) {
                message = "You have marked your Offical Duty till " + odc.get(Calendar.HOUR) + ":" + odc.get(Calendar.MINUTE) + " " + (odc.get(Calendar.AM_PM) == 1 ? "PM" : "AM") + " today. Would you like to proceed?";
            } else if (mode.equals("COMING")) {
                message = "You have marked your Offical Duty till " + new Date().toString() + " today. Would you like to proceed?";
            }

            int option = JOptionPane.showConfirmDialog(null, message);
            switch (option) {
                case JOptionPane.CANCEL_OPTION:
                    this.l.cancel();
                    this.dispose();
                    return;

                case JOptionPane.OK_OPTION:
                    if (mode.equals("LEAVING")) {
                        result = d.apply(this.emp.getEmpCode(), new Timestamp(new java.util.Date().getTime()), new Timestamp(odDate.getTime()), "OD", emp.getDeptID());
                    } else if (mode.equals("COMING")) {
                        Calendar c = Calendar.getInstance();
                        c.set(Calendar.HOUR, 8);
                        c.set(Calendar.MINUTE, 30);
                        c.set(Calendar.AM_PM, Calendar.AM);

                        Timestamp t = new Timestamp(c.getTimeInMillis());
                        Timestamp t2 = new Timestamp(System.currentTimeMillis());
                        result = d.apply(this.emp.getEmpCode(), t, t2, "OD", emp.getDeptID());
                    }

                    break;
                case JOptionPane.NO_OPTION:
                    this.l.cancel();
                    this.dispose();
                    return;
            }

            System.out.println("Official Duty Info: (Employee=" + this.emp.getEmpCode() + ",Leave Till=" + odDate.toString() + ")");
        } else if (type.equals("Short Leave")) {
            Calendar c = Calendar.getInstance();

            String message = "You have marked your short leave of two hours today. would you like to proceed?";
            int option = JOptionPane.showConfirmDialog(null, message);
            switch (option) {
                case JOptionPane.CANCEL_OPTION:
                    this.l.cancel();
                    this.dispose();
                    return;
                case JOptionPane.OK_OPTION:
                    if (mode.equals("LEAVING")) {
                        result = d.apply(this.emp.getEmpCode(), new Timestamp(new java.util.Date().getTime()), new Timestamp(shortDate.getTime()), "SHL", emp.getDeptID());
                    } else if (mode.equals("COMING")) {
                        Calendar c2 = Calendar.getInstance();
                        c2.set(Calendar.HOUR, 8);
                        c2.set(Calendar.MINUTE, 30);
                        c2.set(Calendar.AM_PM, Calendar.AM);

                        Timestamp t = new Timestamp(c2.getTimeInMillis());
                        Timestamp t2 = new Timestamp(System.currentTimeMillis());
                        result = d.apply(this.emp.getEmpCode(), t, t2, "SHL", emp.getDeptID());
                    }

                    break;
                case JOptionPane.NO_OPTION:
                    this.l.cancel();
                    this.dispose();
                    return;
            }

            System.out.println("Short Leave Info: (Employee=" + this.emp.getEmpCode() + ",Leave Till=" + shortDate.toString() + ")");
        } else if (type.equals("Half Leave")) {
            String halfLeaveType = "";
            String leaveType = "";
            if (jrSick.isSelected()) {
                halfLeaveType = "SLH";
                leaveType = "Half Sick Leave";
            } else if (rbPriv.isSelected()) {
                halfLeaveType = "PLH";
                leaveType = "Half privileged Leave";
            } else if (rbCasual.isSelected()) {
                leaveType = "Half Casual Leave";
                halfLeaveType = "CLH";
            }

            Calendar c = Calendar.getInstance();
            Calendar c2 = Calendar.getInstance();
            c2.set(Calendar.HOUR, 1);
            c2.set(Calendar.AM_PM, Calendar.PM);

            String firstHalforSecHalf = "";
            System.out.println(">>>>>>>>>>>> " + c.get(Calendar.HOUR_OF_DAY));
            if (c.before(c2)) {
                firstHalforSecHalf = "First Half";
            } else {
                firstHalforSecHalf = "Second Half";
            }
            //String message = "You have marked your "+leaveType+" of " + firstHalforSecHalf + " today.Would you like to proceed?";
            String message = "You have marked your half leave today, Would you like to proceed?";
            int option = JOptionPane.showConfirmDialog(null, message);
            switch (option) {
                case JOptionPane.CANCEL_OPTION:
                    this.l.cancel();
                    this.dispose();
                    return;
                case JOptionPane.OK_OPTION:
                    if (mode.equals("LEAVING")) {
                        result = d.apply(this.emp.getEmpCode(), new Timestamp(new java.util.Date().getTime()), new Timestamp(halfLeaveDate.getTime()), halfLeaveType, emp.getDeptID());
                    } else if (mode.equals("COMING")) {
                        Calendar c3 = Calendar.getInstance();
                        c3.set(Calendar.HOUR, 8);
                        c3.set(Calendar.MINUTE, 30);
                        c3.set(Calendar.AM_PM, Calendar.AM);

                        Timestamp t = new Timestamp(c3.getTimeInMillis());
                        Timestamp t2 = new Timestamp(System.currentTimeMillis());
                        result = d.apply(this.emp.getEmpCode(), t, t2, halfLeaveType, emp.getDeptID());
                    }
                    break;
                case JOptionPane.NO_OPTION:
                    this.l.cancel();
                    this.dispose();
                    return;
            }

        }
        if (result.equals("MAX_LIMIT_SL")) {
            JOptionPane.showMessageDialog(null, "max limit reached");
        } else if (result.equals("SHORT_LEAVE_BAL_OUT")) {
            int option = JOptionPane.showConfirmDialog(null, "Insufficent monthly short leave balance. Would you still like to leave office. ");
            if (option == JOptionPane.OK_OPTION) {
                Calendar c = Calendar.getInstance();
                //here
                //l.ok(this.emp.getName()+" is leaving the office.");
            }
            if (option == JOptionPane.NO_OPTION) {
                l.cancel();
            }
            if (option == JOptionPane.CANCEL_OPTION) {
                l.cancel();
            }

            //this.dispose();
        } else if (result.equals("BAL_OUT")) {
            int option = JOptionPane.showConfirmDialog(null, "Insufficent leave balance. Would you like to proceed with 'leave without pay' or 'advance leave adjustment?Contact HR Time Office.' ");
            if (option == JOptionPane.OK_OPTION) {
                Calendar c = Calendar.getInstance();
                Calendar c2 = Calendar.getInstance();
                c2.set(Calendar.HOUR, 1);
                c2.set(Calendar.AM_PM, Calendar.PM);

                String firstHalforSecHalf = "";

                if (c.before(c2)) {
                    firstHalforSecHalf = "First Half";
                } else {
                    firstHalforSecHalf = "Second Half";
                }
                //l.ok(this.emp.getName()+" is leaving the office.");

            }
            if (option == JOptionPane.NO_OPTION) {
                l.cancel();
            }
            if (option == JOptionPane.CANCEL_OPTION) {
                l.cancel();
            }

        } else {
            //l.ok(this.emp.getName()+" has proceeded on Official Duty till" + hours + ":" + min + " " + ampm + " today.");

        }
        this.dispose();
    }*/
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton5ActionPerformed
//    private void swapUI() {
//        if (rbOd.isSelected()) {
//            jPanel2.setVisible(true);
//            jPanel3.setVisible(true);
//            jPanel1.setVisible(true);
//            jsAMPM.setVisible(true);
//            jrSick.setVisible(false);
//            rbCasual.setVisible(false);
//            rbPriv.setVisible(false);
//            jLabel3.setVisible(false);
//        } else if (rbShortLeave.isSelected()) {
//            jsAMPM.setVisible(false);
//            jPanel2.setVisible(false);
//            jPanel3.setVisible(false);
//            jPanel1.setVisible(false);
//            jrSick.setVisible(false);
//            rbCasual.setVisible(false);
//            rbPriv.setVisible(false);
//            jLabel3.setVisible(true);
//        } else {
//            jsAMPM.setVisible(false);
//            jPanel2.setVisible(false);
//            jPanel3.setVisible(false);
//            jPanel1.setVisible(false);
//            jrSick.setVisible(true);
//            rbCasual.setVisible(true);
//            jLabel3.setVisible(false);
//            rbPriv.setVisible(true);
//        }
//    }
    private void rbOdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbOdActionPerformed

        //swapUI();
    }//GEN-LAST:event_rbOdActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RuntimeAttendanceMarker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RuntimeAttendanceMarker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RuntimeAttendanceMarker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RuntimeAttendanceMarker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                RuntimeAttendanceMarker dialog = new RuntimeAttendanceMarker(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JButton jbMarkOk;
    private javax.swing.JRadioButton rbOd;
    private javax.swing.JRadioButton rbPersonalReasons;
    // End of variables declaration//GEN-END:variables
}
